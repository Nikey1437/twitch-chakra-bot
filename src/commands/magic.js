const { pickRandomChatterExceptInitiator, toInt, chatters } = require('../utils')

let ponyMagicAvailable = true
let ponyNickname = null
let ponyTimeout = null

class Magic {
    #client

    #magics

    register (client, handlers) {
        this.#client = client
        this.#magics = {
            pony_v_popone: this.pony_v_popone.bind(this),
            febfora: this.febfora.bind(this),
            prapzad: this.prapzad.bind(this),
            chakralounge: this.chakralounge.bind(this),
            hareman8: this.hareman8.bind(this),
            nikey1437: this.nikey1437.bind(this)
        }

        handlers['!magic'] = this.magic.bind(this)
        handlers['!–º–∞–≥–∏—è'] = this.magic.bind(this)

        handlers['!–ª—è–≥–Ω—É—Ç—å'] = this.pony_kick.bind(this)
        handlers['!—Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å'] = this.unpony.bind(this)
        handlers['!–ø–æ–Ω–∏'] = this.pony.bind(this)
    }

    async magic (target, username, msg, data) {
        const handler = this.#magics[username]

        if (handler != null) {
            await handler(target, username, msg, data)
        } else {
            await this.#client.say(target, '–ú–∞–≥–∏—è –≤–Ω–µ –•–æ–≥–≤–∞—Ä—Ç—Å–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞! –•–æ—á–µ—à—å —Å—Ç–∞—Ç—å –≤–æ–ª—à–µ–±–Ω–∏–∫–æ–º? –ß–∏—Ç–∞–π –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–æ–¥ —Å—Ç—Ä–∏–º–æ–º –∫–∞–∫!')
        }
    }

    async pony_v_popone (target, username, msg, data) {
        if (!ponyMagicAvailable) {
            return
        }
        const split = msg.split(' ')
        const targetName = split[1]

        if (targetName == null) {
            const ponyMovesList1 = ['–≥–æ—Ä—Ü—É–µ—Ç', '–≥–æ–≥–æ—á–µ—Ç', '—Ä–∞–¥–æ—Å—Ç–Ω–æ —Å–∫–∞—á–µ—Ç', '–∫—É—à–∞–µ—Ç –º–æ—Ä–∫–æ–≤–∫—É']
            const selectedPonyMove1 = ponyMovesList1[Math.round(Math.random() * (ponyMovesList1.length - 1))]
            await this.#client.say(target, `${username} ${selectedPonyMove1}`)
            return
        }

        await this.#client.say(target, `${targetName} –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ø–æ–Ω–∏! –ù–æ–≤–æ–∏—Å–ø–µ—á–µ–Ω–Ω—ã–π –ø–æ–Ω–∏ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å !–ø–æ–Ω–∏ –∏ !–ª—è–≥–Ω—É—Ç—å`)

        ponyMagicAvailable = false
        ponyNickname = targetName
        if (ponyNickname.indexOf('@') > -1) {
            ponyNickname = ponyNickname.substring(1)
        }

        ponyTimeout = setTimeout(async () => {
            await this.#client.say(target, `${ponyNickname} –±–æ–ª—å—à–µ –Ω–µ –ø–æ–Ω–∏`)

            ponyMagicAvailable = true
            ponyNickname = ''
        }, 300000)
    }

    async pony_kick (target, username, msg, data) {
        if (!(username === 'pony_v_popone' || username === 'kpotko' || username === ponyNickname)) {
            return
        }

        const split = msg.split(' ')

        let kickTarget

        if (split.length !== 1) {
            kickTarget = split[1].toLowerCase()
        } else {
            const users = await chatters(target)
            kickTarget = pickRandomChatterExceptInitiator(users, username)
        }

        if (kickTarget == null) {
            return
        }

        const kickRoll = Math.round(Math.random() * 10)

        const isKnockdown = kickRoll >= 7

        const kickList = ['–ø–æ –∂—ë–ø–∫–µ', '–≤ –ª–æ–±', '–≤ –ø—É–∑–∏–∫–æ']
        const kickListLength = kickList.length
        const kickNumber = Math.floor(Math.random() * kickListLength)

        await this.#client.say(target, `–ü–æ–Ω–∏ –ª—è–≥–∞–µ—Ç –∫–æ–ø—ã—Ç—Ü–µ–º ${kickList[kickNumber]} ${kickTarget} ^_^`)
        if (isKnockdown) {
            await this.#client.say(target, `${kickTarget} –ø–∞–¥–∞–µ—Ç –≤ –Ω–æ–∫–¥–∞—É–Ω`)
            await this.#client.timeout(target, kickTarget, 2, '—É–ø–∞–ª –≤ –Ω–æ–∫–¥–∞—É–Ω –æ—Ç —É–¥–∞—Ä–∞ –∫–æ–ø—ã—Ç—Ü–µ–º –ø–æ–Ω–∏ ^_^')
        }
    }

    async unpony (target, username, msg, data) {
        if (!(username === 'pony_v_popone' || username === 'kpotko' || username === 'nikey1437')) {
            return
        }

        if (ponyNickname === '') {
            await this.#client.say(target, '–ù–µ–∫–æ–≥–æ —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å, –¥—É—Ä–∏–∫')
            return
        }

        await this.#client.say(target, `${ponyNickname} –±–æ–ª—å—à–µ –Ω–µ –ø–æ–Ω–∏`)
        ponyMagicAvailable = true
        ponyNickname = null
        clearTimeout(ponyTimeout)
    }

    async pony (target, username, msg, data) {
        if (username.toLowerCase() === ponyNickname.toLowerCase()) {
            const ponyMovesList = ['–≥–æ—Ä—Ü—É–µ—Ç', '–≥–æ–≥–æ—á–µ—Ç', '—Ä–∞–¥–æ—Å—Ç–Ω–æ —Å–∫–∞—á–µ—Ç', '–∫—É—à–∞–µ—Ç –º–æ—Ä–∫–æ–≤–∫—É']

            const selectedPonyMove = ponyMovesList[Math.round(Math.random() * (ponyMovesList.length - 1))]

            await this.#client.say(target, `${username} ${selectedPonyMove}`)
        }
    }

    async febfora (target, username, msg, data) {
        const febforaMagicList = ['–ó–¥–µ—à–Ω–∏–µ –ø–µ—Å–∫–∏ —Ö–æ–ª–æ–¥–Ω—ã–µ, –Ω–æ –∫–æ–≥–¥–∞ —Ç—ã –∑–¥–µ—Å—å, –∫–∞–¥–∂–∏—Ç—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–µ–ø–ª–µ–µ',
            '–ñ–∏–ª –±–µ–∑ —Å—Ç—Ä–∞—Ö–∞ –∏ —É–º–µ—Ä –±–µ–∑ —Å—Ç—Ä–∞—Ö–∞.',
            '–†–∞–Ω—å—à–µ –º–µ–Ω—è —Ç–æ–∂–µ –≤–µ–ª–∞ –¥–æ—Ä–æ–≥–∞ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π, –∞ –ø–æ—Ç–æ–º –º–Ω–µ –ø—Ä–æ—Å—Ç—Ä–µ–ª–∏–ª–∏ –∫–æ–ª–µ–Ω–æ.',
            '–î–∞–π-–∫–∞ —É–≥–∞–¥–∞—é: –∫—Ç–æ-—Ç–æ —É–∫—Ä–∞–ª —Ç–≤–æ–π —Å–ª–∞–¥–∫–∏–π —Ä—É–ª–µ—Ç?']
        const febforaMagicPhraseChoose = [Math.round(Math.random() * (febforaMagicList.length - 1))]

        const split = msg.split(' ')
        const targetCount = split[1]

        if (targetCount !== null) {
            const i = toInt(targetCount)
            await this.#client.say(target, febforaMagicList[(i - 1) % febforaMagicList.length])
        } else {
            await this.#client.say(target, febforaMagicPhraseChoose)
        }
    }

    async prapzad (target, username, msg, data) {
        const enemyType = Math.round(Math.random() * 3)

        let enemyName = ''
        let resultText

        switch (enemyType) {
            case 0:
                enemyName = '–±–µ—Å–æ–≤'
                break

            case 1:
                enemyName = '—Ñ–µ–µ—á–µ–∫'
                break

            case 2:
                enemyName = '—á–µ—Ä–Ω—ã—Ö –¥—Ä–∞–∫–æ–Ω–æ–≤'
                break

            case 3:
                enemyName = '–∫–ª–æ–Ω–æ–≤ –ö—Ä–æ—Ç–∫–æ'
                break
            default:
        }

        const enemyCount = Math.round(Math.random() * 20)

        const resultChanse = Math.round(Math.random())
        if (resultChanse === 1) {
            resultText = '–ì–û —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–±–∏—Ç–æ'
        } else {
            resultText = '–ü—Ä–æ–±–∏—Ç–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å BibleThump'
        }

        await this.#client.say(target, `${username} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–±–∏—Ç—å –ì–û –Ω–∞ 117`)
        await this.#client.say(target, `${enemyCount} ${enemyName}`)
        await this.#client.say(target, `${resultText}`)
    }

    async nikey1437 (target, username, msg, data) {
        await this.#client.say(target, '–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –ª—é–±–æ–≤—å —Å—Ä–µ–¥–∏ —á–∞—Ç–∞ VirtualHug')
        const users = await chatters(target)

        for (let i = 0; i < 4; i += 1) {
            const randomChatter = pickRandomChatterExceptInitiator(users, username)
            const randomChatter2 = pickRandomChatterExceptInitiator(users, username)

            if (randomChatter && randomChatter2) {
                // eslint-disable-next-line no-await-in-loop
                await this.#client.say(target, `${randomChatter2} üòòüëÑ ${randomChatter}`)
            }
        }
    }

    async chakralounge (target, username, msg, data) {
        const raceList = ['—Å–æ—Å—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–∞–º–ø–∏—Ä–æ–≤', '—Å–ª–µ–ø—ã—Ö –≠–ª—å—Ñ–æ–≤-—Å–Ω–∞–π–ø–µ—Ä–æ–≤', '–∫–∞—Ä–ª–∏–∫–æ–≤—ã—Ö –æ—Ä–∫–æ–≤ SMOrc ', '–¥–≤—É–≥–ª–∞–∑—ã—Ö —Ü–∏–∫–ª–æ–ø–æ–≤ KEKW ', '–ø–æ–¥–≤–∞–ª—å–Ω—ã—Ö –≥–æ–±–ª–∏–Ω–æ–≤-—à–∫–æ–ª—å–Ω–∏–∫–æ–≤ ', '–∑–ª–æ–±–Ω—ã—Ö –±–æ–ª–æ—Ç–Ω—ã—Ö —Ö–æ–º—è–∫–æ–≤ ', '—ç–ª–∏—Ç–Ω—ã—Ö –ø–æ–Ω–µ–π –≤ –ø–æ–ø–æ–Ω–∞—Ö', '—ç–Ω—Ç–æ–≤-–ø–µ–Ω—å–∫–æ–≤', '–º–æ–≥—É—á–∏—Ö –¥—Ä–∞–∫–æ–Ω–æ–≤, –Ω–æ –±–µ–∑ –ø—Ä–æ–∂–∏–≥–∞', '–ø–∞—Å–∏—Å–æ–≤-–ø–æ—Å–æ—Å–æ–≤', '–±–µ–∑—É–º–Ω—ã—Ö –∑–µ–ª–µ–Ω–æ–∫–æ–∂–∏—Ö –¥—Ä–µ–Ω–µ–µ–≤', '–¥—É—à–Ω—ã—Ö –∂–∞–± —Å –º–µ—á–∏–∫–æ–º', '–∑–∞–Ω—É–¥–Ω—ã—Ö –∫—Ä–æ—Ç–∫–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –∞–ª–∫–∞—à–µ–π', '–æ–±–æ—Ä–æ—Ç–Ω–µ–π-–∫—Ä—ã—Å', '–∂—Ä–µ—Ü–æ–≤-–∞—Ç–µ–∏—Å—Ç–æ–≤', '–±–µ–∑—Ä–æ–≥–∏—Ö –µ–¥–∏–Ω–æ—Ä–æ–≥–æ–≤', '—Ç–µ–ø–ª–æ–ª—é–±–∏–≤—ã—Ö –∫–ª—ã–∫–∫–∞—Ä–æ–≤-–∫–æ—á–µ–≤–Ω–∏–∫–æ–≤', '–ø—Ä–∏–∑—Ä–∞–∫–æ–≤-–æ–¥–Ω–æ–¥–Ω–µ–≤–æ–∫', '—á–µ—Å—Ç–Ω—ã—Ö –≤–æ—Ä–æ–≤-—Å–µ—Ä–¥—Ü–µ–∫—Ä–∞–¥–æ–≤ <3 ', ' –≥—Ä—É—Å—Ç–Ω—ã—Ö –∫–ª–æ—É–Ω–æ–≤ BibleThump  ', '–±–µ–∑–¥–∞—Ä–Ω—ã—Ö –ø—Ä–æ–≥–µ—Ä–æ–≤ ', '—â–µ–π—Ö–æ–≤ –±–µ–∑ —Å—Ä–µ–¥—Å—Ç–≤ –∫ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—é ']
        await this.#client.say(target, '–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞ –ø–æ —Ä–∞—Å–∞–º!')
        const users = await chatters(target)
        for (let i = 0; i < 3; i += 1) {
            const randomChatter = pickRandomChatterExceptInitiator(users, username)
            const selectedRace = raceList[Math.round(Math.random() * (raceList.length - 1))]
            if (randomChatter) {
                // eslint-disable-next-line no-await-in-loop
                await this.#client.say(target, `@${randomChatter} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ —Ä–∞—Å–µ ${selectedRace}`)
            }
        }
    }

    async hareman8 (target, username, msg, data) {
        await this.#client.say(target, '–ü—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç —Å–∞–º–æ–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö')
        await this.#client.say(target, '–õ–µ—Ä–∞ –∫–∏–¥–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–æ–∂–µ–∫ –µ–º—É –≤ –ª—Å')
    }

    async kitikyt (target, username, msg, data) {
        const split = msg.split(' ')
        const targetName = split[1]
        if (targetName == null) {
            await this.#client.say(target, `–ì–æ—Å–ø–æ–∂–∞ ${username} –Ω–∞–ª–∏–≤–∞–µ—Ç —Å–µ–±–µ —á–∞–π –≤ –∫—Ä—É–∂–µ—á–∫—É –∏ –¥–æ—Å—Ç–∞—ë—Ç –ø–µ—á–µ–Ω—å–∫–∏`)
        } else {
            await this.#client.say(target, `–ì–æ—Å–ø–æ–∂–∞ ${username} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç ${targetName} –Ω–∞ —á–∞–µ–ø–∏—Ç–∏–µ, –∏ —Ä–∞–∑–ª–∏–≤–∞–µ—Ç —á–∞—ë—á–µ–∫ –≤ —á–∞—à–µ—á–∫–∏`)
        }
    }
}

module.exports = Magic
